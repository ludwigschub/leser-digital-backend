datasource db {
  provider = "postgresql" // Change this to your database provider
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

model User {
  id                 String            @id @default(cuid())
  name               String
  email              String            @unique
  password           String
  role               Role              @default(USER)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  codeId             Int?
  code               VerificationCode? @relation()
  verified           Boolean           @default(false)
  resetPasswordToken String?
  accessToken        String?
  refreshToken       String[]          @default([])
  articleActivity    ArticleActivity[]
  subscriptions      Subscription[]
}

model VerificationCode {
  id        String   @id @default(cuid())
  code      String
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum Role {
  USER
  ADMIN
}

model Source {
  id            String              @id @default(cuid())
  key           String              @unique
  name          String
  logo          String
  banner        String
  feeds         String[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  articles      Article[]
  editors       Editor[]
  searchTerms   SearchTerm[]
  searchRanking SearchTermRanking[]
}

model Editor {
  id          String       @id @default(cuid())
  name        String
  sourceId    String
  source      Source       @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  articles    Article[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  searchTerms SearchTerm[]
}

model Topic {
  id            String              @id @default(cuid())
  name          String
  banner        String
  category      ArticleCategory     @unique
  articles      Article[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  searchTerms   SearchTerm[]
  searchRanking SearchTermRanking[]
}

model Subscription {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  searchTerm   SearchTerm @relation(fields: [searchTermId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  searchTermId String
}

model Article {
  id          String            @id @default(cuid())
  title       String
  description String?
  content     String?
  url         String            @unique
  image       String?
  topicId     String
  topic       Topic             @relation(fields: [topicId], references: [id])
  premium     Boolean           @default(false)
  recommended Boolean           @default(false)
  short       Boolean           @default(false)
  sourceId    String
  source      Source            @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  editors     Editor[]
  uploadedAt  DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  activity    ArticleActivity[]
  ranking     ArticleRanking?
}

enum ArticleCategory {
  TECHNOLOGY
  SCIENCE
  HEALTH
  BUSINESS
  ENTERTAINMENT
  SPORTS
  POLITICS
  CULTURE
  ENVIRONMENT
  RELIGION
  EDUCATION
  BREAKING
  CRIME
  GAMING
  TRAVEL
  ART
  LAW
  PSYCHOLOGY
  HISTORY
  FOOD
  FITNESS
  FASHION
  PUZZLE
  WEATHER
  MUSIC
  MOVIES
  ANIMALS
  NATURE
  PHILOSOPHY
  LITERATURE
  FINANCE
  AUTOMOTIVE
  UNKNOWN
}

enum ArticleActivityType {
  VIEW_ARTICLE
  SAVE_ARTICLE
}

model ArticleActivity {
  id        String              @id @default(cuid())
  type      ArticleActivityType
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  userId    String
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId String
  article   Article             @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model SearchTerm {
  id               String             @id @default(cuid())
  active           Boolean            @default(true)
  term             String?
  sourceId         String?
  source           Source?            @relation(fields: [sourceId], references: [id])
  editorId         String?
  editor           Editor?            @relation(fields: [editorId], references: [id])
  topicId          String?
  topic            Topic?             @relation(fields: [topicId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  rankingId        String?
  ranking          SearchTermRanking?
  subscriptions    Subscription[]
  articleRanking   ArticleRanking[]
  articleRankingId String[]
}

model SearchTermRanking {
  id           String     @id @default(cuid())
  searchTermId String     @unique
  searchTerm   SearchTerm @relation(fields: [searchTermId], references: [id])
  mentions     Int        @default(0)
  forSourceId  String?
  forSource    Source?    @relation(fields: [forSourceId], references: [id])
  forTopicId   String?
  forTopic     Topic?     @relation(fields: [forTopicId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model ArticleRanking {
  id          String       @id @default(cuid())
  articleId   String       @unique
  article     Article      @relation(fields: [articleId], references: [id])
  mentions    Int          @default(0)
  searchTerms SearchTerm[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
